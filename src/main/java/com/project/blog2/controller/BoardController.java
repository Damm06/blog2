package com.project.blog2.controller;import com.project.blog2.config.auth.PrincipalDetails;import com.project.blog2.domain.Board;import com.project.blog2.dto.MultiResponseDto;import com.project.blog2.dto.SingleResponseDto;import com.project.blog2.dto.board.BoardRequestDto;import com.project.blog2.dto.board.BoardUpdateDto;import com.project.blog2.mapper.BoardMapper;import com.project.blog2.service.BoardService;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Sort;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.security.core.annotation.AuthenticationPrincipal;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.annotation.*;import javax.validation.Valid;import java.util.List;@RestController@RequestMapping("/board")@Validatedpublic class BoardController {    private final BoardService boardService;    private final BoardMapper mapper;    public BoardController(BoardService boardService,                           BoardMapper mapper) {        this.boardService = boardService;        this.mapper = mapper;    }    //글 작성    @PostMapping    @PreAuthorize("hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')")    public ResponseEntity postBoard(@Valid @RequestBody BoardRequestDto boardRequestDto, @AuthenticationPrincipal PrincipalDetails principalDetails) {        //Board board = boardService.createBoard(mapper.boardPostDtoToBoard(boardPostDto));//        Long userId = Optional.ofNullable(userDetails).orElseThrow(() ->//                new BusinessLogicException(ExceptionCode.USER_NOT_FOUND)).getUser().getId();//        Board board = boardService.writeBoard(boardRequest, userId);//        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();//        userDetails = (PrincipalDetails) principal;        Board board = boardService.writeBoard(boardRequestDto, principalDetails);//        board.setUser(principalDetails.getUser());        //보드 repository save 해보기        return new ResponseEntity<>(                new SingleResponseDto<>(mapper.boardToBoardResponseDto(board)),                HttpStatus.CREATED);    }    //글 수정    @PutMapping("/{id}")    @PreAuthorize("hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')")    public ResponseEntity putBoard(@PathVariable long id,                                   @RequestBody BoardUpdateDto boardUpdateDto) {        boardUpdateDto.setId(id);        Board board = boardService.updateBoard(mapper.boardUpdateDtoToBoard(boardUpdateDto));        return new ResponseEntity<>(new SingleResponseDto<>(mapper.boardToBoardResponseDto(board)),                HttpStatus.OK);    }    //특정 글 id로 조회    @GetMapping("/{id}")    public ResponseEntity getBoard(@PathVariable long id) {        Board board = boardService.findBoardById(id);        return new ResponseEntity<>(                new SingleResponseDto<>(mapper.boardToBoardResponseDto(board)),                HttpStatus.OK);    }    //글 목록 조회    @GetMapping    public ResponseEntity getBoards(@RequestParam int page,                                    @RequestParam int size) {        Page<Board> pagedBoards = boardService.findBoardList(PageRequest.of(page -1, size, Sort.by("id").descending()));        List<Board> boards = pagedBoards.getContent();        return new ResponseEntity<>(                new MultiResponseDto<>(mapper.boardsToBoardResponseDto(boards),                        pagedBoards),                HttpStatus.OK);    }    //글 삭제    @DeleteMapping("/{id}")    @PreAuthorize("hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')")   public ResponseEntity deleteBoard(@PathVariable long id) {        boardService.deleteBoard(id);        return new ResponseEntity<>(HttpStatus.NO_CONTENT);    }}